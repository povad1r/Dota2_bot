import logging
from aiogram import Bot, Dispatcher, executor, types
from func import get_content
from keyboards.game_choice import game_choice
from keyboards.tournament_choice import tournament_choice
from keyboards.date_choice import date_choice
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os 
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('TOKEN')
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

async def set_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
            types.BotCommand('matches', '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞–π–±–ª–∏–∂—á—ñ –º–∞—Ç—á—ñ'),
            types.BotCommand('tournament', '–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ç—á—ñ –ø–µ–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É'),
            types.BotCommand('date', '–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ç—á—ñ –Ω–∞ –ø–µ–≤–Ω—É –¥–∞—Ç—É'),
            types.BotCommand('support', '–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
        ]
    )


@dp.callback_query_handler(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥‚Ü©Ô∏è', state='*')
async def go_back(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state('default')
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, f'–¢–∏ –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞–∑–∞–¥, –æ—Å—å –ø–µ—Ä–µ–ª—ñ–∫ —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥:\n/matchesüïπÔ∏è\n/dateüìÖ\n/tournamentüèÜ\n/supportüéß')


@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f'–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –≤—ñ–¥—Å—Ç–µ–∂—É—î –º–∞–π–±—É—Ç–Ω—ñ –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—ñ –º–∞—Ç—á—ñ –ø–æ Dota 2üïπÔ∏è.\n‚ö™ –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞–π–±—É—Ç–Ω—ñ—Ö –º–∞—Ç—á—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /matches.\n‚ö™ –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á—ñ–≤ –ø–µ–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—ÉüèÜ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /tournament.\n‚ö™ –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á—ñ–≤ –Ω–∞ –ø–µ–≤–Ω—É –¥–∞—Ç—ÉüìÖ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /date.\n‚ö™ –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /support\n‚ö™ –î–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–∏-—É—á–∞—Å–Ω–∏—Ü—ñ, —á–∞—Å –ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ —ñ —Ç—É—Ä–Ω—ñ—Ä, –≤ —è–∫–æ–º—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –º–∞—Ç—á.')
    await state.set_state('default')


@dp.message_handler(commands='matches', state='default')
async def amount(message: types.Message, state: FSMContext):
    await message.answer(f'–°–∫—ñ–ª—å–∫–∏ –º–∞—Ç—á—ñ–≤ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏?', reply_markup = game_choice)
    await state.set_state('matches_state')


@dp.callback_query_handler(state='matches_state')
async def process_callback_limit(callback_query: types.CallbackQuery):
    limit = int(callback_query.data)
    content = get_content(limit)
    for match in content:
        response = (f"\n\n‚ñ™Ô∏è Tournament: {match['tournament']}‚ñ™Ô∏è\n‚ñ™Ô∏è Match time: {match['time']}‚ñ™Ô∏è\n‚ñ´Ô∏è{match['team_1']}{match['score']} {match['team_2']}‚ñ´Ô∏è")
        await bot.send_message(callback_query.from_user.id, response)


@dp.message_handler(commands='tournament', state='default')
async def tournament(message: types.Message, state: FSMContext):
    await message.answer(f'–Ø–∫–∏–π —Å–∞–º–µ —Ç—É—Ä–Ω—ñ—Ä –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüèÜ?', reply_markup=tournament_choice)
    await state.set_state('tournament_state')


@dp.callback_query_handler(state='tournament_state')
async def tournament_pick(callback_query: types.CallbackQuery):
    content = get_content(50)
    for match in content:
        if match['tournament'] == callback_query.data:
            response = (f"\n\n‚ñ™Ô∏è Tournament: {match['tournament']}‚ñ™Ô∏è\n‚ñ™Ô∏è Match time: {match['time']}‚ñ™Ô∏è\n‚ñ´Ô∏è {match['team_1']} {match['score']} {match['team_2']}‚ñ´Ô∏è")
            await bot.send_message(callback_query.from_user.id, response)


@dp.message_handler(commands='date', state='default')
async def date(message: types.Message, state: FSMContext):
    await message.answer(f'–Ø–∫–∞ –¥–∞—Ç–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüìÖ?', reply_markup=date_choice)
    await state.set_state('date_state')


@dp.callback_query_handler(state='date_state')
async def date_pick(callback_query: types.CallbackQuery):
    content = get_content(50)
    for match in content:
        if match['date'] == callback_query.data:
            response = (f"\n\n‚ñ™Ô∏è Tournament: {match['tournament']}‚ñ™Ô∏è\n‚ñ™Ô∏è Match time: {match['time']}‚ñ™Ô∏è\n‚ñ´Ô∏è {match['team_1']} {match['score']} {match['team_2']}‚ñ´Ô∏è")
            await bot.send_message(callback_query.from_user.id, response)

@dp.message_handler(commands='support', state='default')
async def support(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –ø–∏—à—ñ—Ç—å @povad1r')
    await state.set_state('default')

async def on_startup(dp):
    await set_default_commands(dp)



if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
